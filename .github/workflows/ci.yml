name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Install Linux packages
        if: runner.os == 'Linux'
        run: |
          sudo apt-key adv --keyserver hkps://keys.openpgp.org --recv-keys 11E9DE8848F2B65222AA75B8D1820DB22A11534E
          sudo add-apt-repository "deb https://weechat.org/ubuntu $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt install weechat-devel-curses libclang-dev
      - name: Install macOS packages
        if: runner.os == 'macOS'
        run: brew install --build-from-source noskcaj19/tap/weechat@3.5
      # NB: We install gnu-tar because BSD tar is buggy on Github's macos machines. https://github.com/actions/cache/issues/403
      - name: Install GNU tar (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      - name: Install stable toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: Run tests
        run: cargo xtask tests

      - name: Run tests (features)
        run: cargo xtask tests
        env:
          WEECORD_FEATURES: syntax_highlighting,images

      - name: Build binaries
        run: cargo xtask build
        env:
          WEECORD_FEATURES: syntax_highlighting,images

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: weechat-discord-linux
          path: target/release/libweecord.*
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v2
        if: runner.os == 'macOS'
        with:
          name: weechat-discord-macos
          path: target/release/libweecord.*

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check
